图结构就是多叉树结构的延申 图结构逻辑上由若干节点（vertex）和边（edge）构成 我们一般用邻接表 邻接矩阵 等方式来存储图

在树结构中 只允许父节点指向子节点 不存在子节点指向父节点的情况 子节点之间也不会互相连接 而图中没有那么多限制 节点之间可以互相指向 形成复杂的网络结构 

因为图结构可以对更复杂的问题进行抽象 所以产生了更复杂的图论算法  比较经典的有二分图算法 拓扑排序 最短路径算法 最小生成树算法等 

图的逻辑结构 

一幅图是由节点和边组成 

class Vertex{
    int id;
    Vertex[] neighbors;
}

和多叉树的节点几乎一样

class TreeNode{
  int val;
  TreeNode[] children;
}
所以说，图真的没啥高深的，本质上就是个高级点的多叉树而已，适用于树的 DFS/BFS 遍历算法，全部适用于图。

我们这里明确一个图论中特有的度degree的概念 

在无向图中 度就是每个节点相连的边的条数 由于有向图的边有方向 所以有向图的每个节点的度被细分为入度和出度 



上面讲解的图结构是「逻辑上的」，具体实现上，我们很少用这个 Vertex 类，而是用邻接表、邻接矩阵来实现图结构。

邻接表和邻接矩阵实现图结构 

邻接表 

0  【4 3 1】
1  【3 2 4】
2  【3】
3  【4】
4  【】


邻接矩阵
 0 1 2 3 4
0  *   * *
1    * * *
2      *  
3        *
4          

邻接表很直观，我把每个节点 x 的邻居都存到一个列表里，然后把 x 和这个列表映射起来，这样就可以通过一个节点 x 找到它的所有相邻节点。

邻接矩阵则是一个二维布尔数组，我们权且称为 matrix，如果节点 x 和 y 是相连的，那么就把 matrix[x][y] 设为 true（上图中绿色的方格代表 true）。如果想找节点 x 的邻居，去扫一圈 matrix[x][..] 就行了。


// 邻接表
// graph[x] 存储 x 的所有邻居节点
List<Integer>[] graph;


// 邻接矩阵
// matrix[x][y] 记录 x 是否有一条指向 y 的边
boolean[][] matrix;

节点类型不是 int 怎么办

上述讲解中，我默认图节点是一个从 0 开始的整数，所以才能存储到邻接表和邻接矩阵中，通过索引访问。

但实际问题中，图节点可能是其他类型，比如字符串、自定义类等，那应该怎么存储呢？

很简单，你再额外使用一个哈希表，把实际节点和整数 id 映射起来，然后就可以用邻接表和邻接矩阵存储整数 id 了。

邻接表和邻接矩阵的使用场景

注意分析两种存储方式的空间复杂度，对于一幅有 V 个节点，E 条边的图，邻接表的空间复杂度是 
O
(
V
+
E
)
O(V+E)，而邻接矩阵的空间复杂度是 
O
(
V
2
)
O(V 
2
 )。

所以如果一幅图的 E 远小于 V^2（稀疏图），那么邻接表会比邻接矩阵节省空间，反之，如果 E 接近 V^2（稠密图），二者就差不多了。

在后面的图算法和习题中，大多都是稀疏图，所以你会看到邻接表的使用更多一些。

邻接矩阵的最大优势在于，矩阵是一个强有力的数学工具，图的一些隐晦性质可以借助精妙的矩阵运算展现出来。不过本文不准备引入数学内容，所以有兴趣的读者可以自行搜索学习。

这也是为什么一定要把图节点类型转换成整数 id 的原因，不然的话你怎么用矩阵运算呢？

不同种类的图结构 

这还只是有向无权图 还有加权图 无向图 
如果是邻接表，我们不仅仅存储某个节点 x 的所有邻居节点，还存储 x 到每个邻居的权重，不就实现加权有向图了吗？

如果是邻接矩阵，matrix[x][y] 不再是布尔值，而是一个 int 值，0 表示没有连接，其他值表示权重，不就变成加权有向图了吗？

代码的形式来实现 
// 邻接表
// graph[x] 存储 x 的所有邻居节点以及对应的权
// 具体实现不一定非得这样，可以参考后面的通用实现
class Edge {
    int to;
    int weight;
}
List<Edge>[] graph;

// 邻接矩阵
// matrix[x][y] 记录 x 指向 y 的边的权重，0 表示不相邻
int[][] matrix;

如果连接无向图中的节点 x 和 y，把 matrix[x][y] 和 matrix[y][x] 都变成 true 不就行了；邻接表也是类似的操作，在 x 的邻居列表里添加 y，同时在 y 的邻居列表里添加 x。

把上面的技巧合起来，就变成了无向加权图……

好了，关于图的基本介绍就到这里，现在不管来什么乱七八糟的图，你心里应该都有底了。

下面我写一个通用的类，来实现图的基本操作（增删查改）。


图结构的通用代码实现 

interface Graph{
    //添加一条边 带权重 
    void addEdge(int from , int to ,int weight);
    void removeEdge( int from ,int to );
    boolean hasEdge(int from , int to );
    int weight(int from ,int to);
    List<Edge>neighbors(int v );
    int size();
}
这其实是其实是有向加权图的接口，但基于这个接口可以实现所有不同种类的无向/有向/无权/加权图。下面给出具体代码。

有向加权图 邻接表实现 

class weightDigraph{
    public static class Edge{
        int to;
        int weight;
        public Edge(int to ,int weight){
          this.to = to;
          this.weight = weight;
        }
    }
    //邻接表 graph[v]存储节点v所有的邻居节点及对应权重 
    private List<Edge>[]graph;
    public weightDigraph(int n ){
      //简单起见 建立图时候要传入节点总数 其实可以优化 比如把graph设置为Map<Interger,list<Edge>>,就可以动态添加新节点 
      graph = new List[n];
      for(int i = 0; i<n;i++){
        graph[i] = new ArrayList<>();

      }
    }
    //增 添加一条带权重的有向边 复杂度0（1）
    public void addEdge(int from , int to ,int weight){
        graph[from].add(new Edge(to,weight));
    }
    //删 删除一个有向边 复杂度0【v】
    public void removeEdge(int from ,int to){
      for(int i = 0;i<graph[from].size;i++){
        if(graph[from].get[i].to == to){
            graph[from].remove[i];
            break;
        }
        
      }
    }
// 查，判断两个节点是否相邻，复杂度 O(V)
    public boolean hasEdge(int from, int to) {
        for (Edge e : graph[from]) {
            if (e.to == to) {
                return true;
            }
        }
        return false;
    }
 // 查，返回一条边的权重，复杂度 O(V)
    public int weight(int from, int to) {
        for (Edge e : graph[from]) {
            if (e.to == to) {
                return e.weight;
            }
        }
        throw new IllegalArgumentException("No such edge");
    }
// 上面的 hasEdge、removeEdge、weight 方法遍历 List 的行为是可以优化的
    // 比如用 Map<Integer, Map<Integer, Integer>> 存储邻接表
    // 这样就可以避免遍历 List，复杂度就能降到 O(1)

    // 查，返回某个节点的所有邻居节点，复杂度 O(1)
    public List<Edge> neighbors(int v) {
        return graph[v];
    }
 public static void main(String[] args) {
        WeightedDigraph graph = new WeightedDigraph(3);
        graph.addEdge(0, 1, 1);
        graph.addEdge(1, 2, 2);
        graph.addEdge(2, 0, 3);
        graph.addEdge(2, 1, 4);

        System.out.println(graph.hasEdge(0, 1)); // true
        System.out.println(graph.hasEdge(1, 0)); // false

        graph.neighbors(2).forEach(edge -> {
            System.out.println(2 + " -> " + edge.to + ", wight: " + edge.weight);
        });
        // 2 -> 0, wight: 3
        // 2 -> 1, wight: 4

        graph.removeEdge(0, 1);
        System.out.println(graph.hasEdge(0, 1)); // false
    }

}


有向加权图 
邻接矩阵实现

import java.util.ArrayList;
import java.util.List;

// 加权有向图的通用实现（邻接矩阵）
public class WeightedDigraph {
    // 存储相邻节点及边的权重
    public static class Edge {
        int to;
        int weight;

        public Edge(int to, int weight) {
            this.to = to;
            this.weight = weight;
        }
    }


    // 邻接矩阵，matrix[from][to] 存储从节点 from 到节点 to 的边的权重
    // 0 表示没有连接
    private int[][] matrix;

    public WeightedDigraph(int n) {
        matrix = new int[n][n];
    }

    // 增，添加一条带权重的有向边，复杂度 O(1)
    public void addEdge(int from, int to, int weight) {
        matrix[from][to] = weight;
    }

    // 删，删除一条有向边，复杂度 O(1)
    public void removeEdge(int from, int to) {
        matrix[from][to] = 0;
    }

    // 查，判断两个节点是否相邻，复杂度 O(1)
    public boolean hasEdge(int from, int to) {
        return matrix[from][to] != 0;
    }

    // 查，返回一条边的权重，复杂度 O(1)
    public int weight(int from, int to) {
        return matrix[from][to];
    }

    // 查，返回某个节点的所有邻居节点，复杂度 O(V)
    public List<Edge> neighbors(int v) {
        List<Edge> res = new ArrayList<>();
        for (int i = 0; i < matrix[v].length; i++) {
            if (matrix[v][i] > 0) {
                res.add(new Edge(i, matrix[v][i]));
            }
        }
        return res;
    }

    public static void main(String[] args) {
        WeightedDigraph graph = new WeightedDigraph(3);
        graph.addEdge(0, 1, 1);
        graph.addEdge(1, 2, 2);
        graph.addEdge(2, 0, 3);
        graph.addEdge(2, 1, 4);

        System.out.println(graph.hasEdge(0, 1)); // true
        System.out.println(graph.hasEdge(1, 0)); // false

        graph.neighbors(2).forEach(edge -> {
            System.out.println(2 + " -> " + edge.to + ", wight: " + edge.weight);
        });
        // 2 -> 0, wight: 3
        // 2 -> 1, wight: 4

        graph.removeEdge(0, 1);
        System.out.println(graph.hasEdge(0, 1)); // false
    }
}


无向加权图

// 无向加权图的通用实现
class WeightedUndigraph {
    private WeightedDigraph graph;

    public WeightedUndigraph(int n) {
        graph = new WeightedDigraph(n);
    }

    // 增，添加一条带权重的无向边
    public void addEdge(int from, int to, int weight) {
        graph.addEdge(from, to, weight);
        graph.addEdge(to, from, weight);
    }

    // 删，删除一条无向边
    public void removeEdge(int from, int to) {
        graph.removeEdge(from, to);
        graph.removeEdge(to, from);
    }

    // 查，判断两个节点是否相邻
    public boolean hasEdge(int from, int to) {
        return graph.hasEdge(from, to);
    }

    // 查，返回一条边的权重
    public int weight(int from, int to) {
        return graph.weight(from, to);
    }

    // 查，返回某个节点的所有邻居节点
    public List<WeightedDigraph.Edge> neighbors(int v) {
        return graph.neighbors(v);
    }

    public static void main(String[] args) {
        WeightedUndigraph graph = new WeightedUndigraph(3);
        graph.addEdge(0, 1, 1);
        graph.addEdge(1, 2, 2);
        graph.addEdge(2, 0, 3);
        graph.addEdge(2, 1, 4);

        System.out.println(graph.hasEdge(0, 1)); // true
        System.out.println(graph.hasEdge(1, 0)); // true

        graph.neighbors(2).forEach(edge -> {
            System.out.println(2 + " <-> " + edge.to + ", wight: " + edge.weight);
        });
        // 2 <-> 0, wight: 3
        // 2 <-> 1, wight: 4

        graph.removeEdge(0, 1);
        System.out.println(graph.hasEdge(0, 1)); // false
        System.out.println(graph.hasEdge(1, 0)); // false
    }
}


图结构的DFS/BFS遍历 

图的遍历是多叉树遍历的延申 主要遍历手段是深度优先搜索 dfs 和广度优先遍历 BFS

唯一区别是 树结构中没有环 图结构可能存在环 所以我们需要标记遍历过的节点 
避免遍历函数在环中死循环 

遍历图中的节点和路径略有不同 遍历节点时候 需要visted数组在前序位置标记节点 遍历图的所有路径的时候 需要onPath数组在前序标记节点，后序位置撤销标记。

      
深度优先搜索DFS
对比多叉树的遍历框架看图的遍历框架 

class Node{
    int val;
    List<Node>children;
}
Void traverse(Node root){
    if (root == null){
      return ;
    }
    system.out.println("visited"+root.val);
    for(Node child:root.children){
      traverse(child);
    }
}
上面是多叉树 
下面的是图节点 


图节点 
class Vertex{
    int id;
    Vertex[] neighbor;
}
void traverse（Vertex s,boolean[] visited）{
    if(s == null){
        return ;
    }
    if (visited[s.id]){
      return;
    }
    visited[s.id] =true;
    system.out.println("visit"+s.id);
    for(Vertex neighbor :s.neighbors){
      traverse(neighbor ,visited);
    }
}

// 遍历图的所有节点
void traverse(Graph graph, int s, boolean[] visited) {
    // base case
    if (s < 0 || s >= graph.size()) {
        return;
    }
    if (visited[s]) {
        // 防止死循环
        return;
    }
    // 前序位置
    visited[s] = true;
    System.out.println("visit " + s);
    for (Edge e : graph.neighbors(s)) {
        traverse(graph, e.to, visited);
    }
    // 后序位置
}

遍历所有路径（onPath 数组）
对于树结构，遍历所有「路径」和遍历所有「节点」是没什么区别的。而对于图结构，遍历所有「路径」和遍历所有「节点」稍有不同。

因为对于树结构来说，只能由父节点指向子节点，所以从根节点 root 出发，到任意一个节点 targetNode 的路径都是唯一的。换句话说，我遍历一遍树结构的所有节点之后，必然可以找到 root 到 targetNode 的唯一路径：

List<Node> path = new LinkedList<>();
void traverse(Node root ,Node targetNode){
    if(root == null ){
      return ;
    }
    path.addLast(root);
    if(root.val == target.val){
      System.out.println("find path:"+path);
      
    }
for(Node child :root.children){
    traverse(child,targetNode);
}
path.removeLast();
}

而对于图结构来说，由起点 src 到目标节点 dest 的路径可能不止一条。我们需要一个 onPath 数组，在进入节点时（前序位置）标记为正在访问，退出节点时（后序位置）撤销标记，这样才能遍历图中的所有路径，从而找到 src 到 dest 的所有路径：


// 下面的算法代码可以遍历图的所有路径，寻找从 src 到 dest 的所有路径

// onPath 和 path 记录当前递归路径上的节点
boolean[] onPath = new boolean[graph.size()];
List<Integer> path = new LinkedList<>();

void traverse(Graph graph, int src, int dest) {
    // base case
    if (src < 0 || src >= graph.size()) {
        return;
    }
    if (onPath[src]) {
        // 防止死循环（成环）
        return;
    }
    // 前序位置
    onPath[src] = true;
    path.add(src);
    if (src == dest) {
        System.out.println("find path: " + path);
    }
    for (Edge e : graph.neighbors(src)) {
        traverse(graph, e.to, dest);
    }
    // 后序位置
    path.remove(path.size() - 1);
    onPath[src] = false;
}

按照上面的分析，visited 数组和 onPath 分别用于遍历所有节点和遍历所有路径。那么它们两个是否可能会同时出现呢？答案是可能的。

遍历所有路径的算法复杂度较高，大部分情况下我们可能并不需要穷举完所有路径，而是仅需要找到某一条符合条件的路径。这种场景下，我们可能会借助 visited 数组进行剪枝，提前排除一些不符合条件的路径，从而降低复杂度。

比如后文 
拓扑排序 中会讲到如何判定图是否成环，就会同时利用 visited 和 onPath 数组来进行剪枝。

比方说判定成环的场景，在遍历所有路径的过程中，如果发现一个节点 s 被标记为 visited，那么说明从 s 这个起点出发的所有路径在之前都已经遍历过了。如果之前遍历的时候都没有找到环，我现在再去遍历一次，肯定也不会找到环，所以这里可以直接剪枝，不再继续遍历节点 s。

我会在后面的图论算法和习题中结合具体的案例讲解，这里就不展开了。

完全不用 visited 和 onPath 数组
是否有既不用 visited 数组，也不用 onPath 数组的场景呢？其实也是有的。

前面介绍了，visited 和 onPath 主要的作用就是处理成环的情况，避免死循环。那如果题目告诉你输入的图结构不包含环，那么你就不需要考虑成环的情况了。



广度优先搜索 BFS

多叉树的层序遍历 无非就是加了一个 visited 数组来避免重复遍历节点。
理论上 BFS 遍历也需要区分遍历所有「节点」和遍历所有「路径」，但是实际上 BFS 算法一般只用来寻找那条最短路径，不会用来求所有路径。

当然 BFS 算法肯定也可以求所有路径，但是我们一般会选择用 DFS 算法求所有路径，具体原因我在 
二叉树的递归/层序遍历 中讲过，这里就不展开了。

那么如果只求最短路径的话，只需要遍历「节点」就可以了，因为按照 BFS 算法一层一层向四周扩散的逻辑，第一次遇到目标节点，必然就是最短路径。

和前文 
多叉树层序遍历 介绍的一样，图结构的 BFS 算法框架也有三种不同的写法，下面我会对比着多叉树的层序遍历写一下图结构的三种 BFS 算法框架。


// 多叉树的层序遍历
void levelOrderTraverse(Node root) {
    if (root == null) {
        return;
    }
    Queue<Node> q = new LinkedList<>();
    q.offer(root);
    while (!q.isEmpty()) {
        Node cur = q.poll();
        // 访问 cur 节点
        System.out.println(cur.val);

        // 把 cur 的所有子节点加入队列
        for (Node child : cur.children) {
            q.offer(child);
        }
    }
}

// 图结构的 BFS 遍历，从节点 s 开始进行 BFS
void bfs(Graph graph, int s) {
    boolean[] visited = new boolean[graph.size()];
    Queue<Integer> q = new LinkedList<>();
    q.offer(s);
    visited[s] = true;

    while (!q.isEmpty()) {
        int cur = q.poll();
        System.out.println("visit " + cur);
        for (Edge e : graph.neighbors(cur)) {
            if (!visited[e.to]) {
                q.offer(e.to);
                visited[e.to] = true;
            }
        }
    }
}


第二种能够记录遍历步数的 
// 多叉树的层序遍历
void levelOrderTraverse(Node root) {
    if (root == null) {
        return;
    }
    Queue<Node> q = new LinkedList<>();
    q.offer(root);
    // 记录当前遍历到的层数（根节点视为第 1 层）
    int depth = 1;

    while (!q.isEmpty()) {
        int sz = q.size();
        for (int i = 0; i < sz; i++) {
            Node cur = q.poll();
            // 访问 cur 节点，同时知道它所在的层数
            System.out.println("depth = " + depth + ", val = " + cur.val);

            for (Node child : cur.children) {
                q.offer(child);
            }
        }
        depth++;
    }
}

// 从 s 开始 BFS 遍历图的所有节点，且记录遍历的步数
void bfs(Graph graph, int s) {
    boolean[] visited = new boolean[graph.size()];
    Queue<Integer> q = new LinkedList<>();
    q.offer(s);
    visited[s] = true;
    // 记录从 s 开始走到当前节点的步数
    int step = 0;
    while (!q.isEmpty()) {
        int sz = q.size();
        for (int i = 0; i < sz; i++) {
            int cur = q.poll();
            System.out.println("visit " + cur + " at step " + step);
            for (Edge e : graph.neighbors(cur)) {
                if (!visited[e.to]) {
                    q.offer(e.to);
                    visited[e.to] = true;
                }
            }
        }
        step++;
    }
}


第三种是能够适配不同权重边的情况

// 多叉树的层序遍历
// 每个节点自行维护 State 类，记录深度等信息
class State {
    Node node;
    int depth;

    public State(Node node, int depth) {
        this.node = node;
        this.depth = depth;
    }
}

void levelOrderTraverse(Node root) {
    if (root == null) {
        return;
    }
    Queue<State> q = new LinkedList<>();
    // 记录当前遍历到的层数（根节点视为第 1 层）
    q.offer(new State(root, 1));

    while (!q.isEmpty()) {
        State state = q.poll();
        Node cur = state.node;
        int depth = state.depth;
        // 访问 cur 节点，同时知道它所在的层数
        System.out.println("depth = " + depth + ", val = " + cur.val);

        for (Node child : cur.children) {
            q.offer(new State(child, depth + 1));
        }
    }
}


// 图结构的 BFS 遍历，从节点 s 开始进行 BFS，且记录路径的权重和
// 每个节点自行维护 State 类，记录从 s 走来的权重和
class State {
    // 当前节点 ID
    int node;
    // 从起点 s 到当前节点的权重和
    int weight;

    public State(int node, int weight) {
        this.node = node;
        this.weight = weight;
    }
}


void bfs(Graph graph, int s) {
    boolean[] visited = new boolean[graph.size()];
    Queue<State> q = new LinkedList<>();

    q.offer(new State(s, 0));
    visited[s] = true;

    while (!q.isEmpty()) {
        State state = q.poll();
        int cur = state.node;
        int weight = state.weight;
        System.out.println("visit " + cur + " with path weight " + weight);
        for (Edge e : graph.neighbors(cur)) {
            if (!visited[e.to]) {
                q.offer(new State(e.to, weight + e.weight));
                visited[e.to] = true;
            }
        }
    }
}













union find 并查集 

并查集（Union Find）结构是 
二叉树结构 的衍生，用于高效解决无向图的连通性问题，可以在 
O
(
1
)
O(1) 时间内合并两个连通分量，在 
O
(
1
)
O(1) 时间内查询两个节点是否连通，在 
O
(
1
)
O(1) 时间内查询连通分量的数量。


class UF {
    // 初始化并查集，包含 n 个节点，时间复杂度 O(n)
    public UF(int n);

    // 连接节点 p 和节点 q，时间复杂度 O(1)
    public void union(int p, int q);

    // 查询节点 p 和节点 q 是否连通（是否在同一个连通分量内），时间复杂度 O(1)
    public boolean connected(int p, int q);

    // 查询当前的连通分量数量，时间复杂度 O(1)
    public int count();
}
其中 union 方法用于连接两个节点，connected 方法用于查询两个节点是否连通，count 方法用于查询当前图中的连通分量数量。它们都可以在 
O
(
1
)
O(1) 时间内完成

O(1) 的时间复杂度是最牛逼的，假设你没学过并查集算法，你应该如何实现上述几个方法呢？

也不是完全没办法，比如 
图结构基础及通用代码实现 中已经介绍了图结构邻接表/邻接矩阵的代码实现，这个 union 方法其实就是在图中添加一条无向边，时间复杂度可以做到 
O
(
1
)
O(1)。

这个 connected 方法怎么实现呢？你是不是想说，去查一下邻接表/邻接矩阵，看看这两个节点是否相连就行了？

不对，别忘了上面讲的「连通」的性质，其中有有一条是「传递性」：如果节点 p 和 q 连通，q 和 r 连通，那么 p 和 r 也连通。

你单纯去查邻接表/邻接矩阵，只能判断两个节点是否直接相连，而无法处理这种传递的连通关系。

所以，要想实现 connected(a, b)，我们只能使用 
图结构的 DFS/BFS 遍历算法，从 a 节点开始遍历所有可达的节点，看看 b 节点是否在其中，才能判断 a,b 两个节点是否连通。

这样的话，connected 方法的最坏时间复杂度就是图遍历的复杂度 
O
(
V
+
E
)
O(V+E)，其中 
V
V 是节点数量，
E
E 是边数量。


接下来，count 方法如何实现呢？

还得依赖 
图结构的 DFS/BFS 遍历算法，但是更麻烦。

你得用 BFS/DFS 遍历整幅图，将所有节点分类到不同的连通分量中，最后统计连通分量的数量。这个过程的时间复杂度是 
O
(
V
+
E
)
O(V+E)。

所以说并查集算法非常巧妙，它不仅可以在 
O
(
1
)
O(1) 时间内完成上述操作，而且它根本不需要真的用邻接表/邻接矩阵构造图结构，只需要一个数组就可以了。

并查集的核心原理
并查集本质上还是树结构的延伸。

你想想，对于一棵树，其中的所有节点，是不是都只有同一个根节点？

如果我们想办法把同一个连通分量的节点都放到同一棵树中，把这棵树的根节点作为这个连通分量的代表，那么我们就可以高效实现上面的操作了


并查集的核心原理 

并查集本质上还是树结构的延申 你想想，对于一棵树，其中的所有节点，是不是都只有同一个根节点？

如果我们想办法把同一个连通分量的节点都放到同一棵树中，把这棵树的根节点作为这个连通分量的代表，那么我们就可以高效实现上面的操作了。

并查集底层其实是一片森林（若干棵多叉树），每棵树代表一个连通分量：

connected(p, q)：只需要判断 p 和 q 所在的多叉树的根节点，若相同，则 p 和 q 在同一棵树中，即连通，否则不连通。
count()：只需要统计一下总共有多少棵树，即可得到连通分量的数量。
union(p, q)：只需要将 p 节点所在的这棵树的根节点，接入到 q 节点所在的这棵树的根节点下面，即可完成连接操作。注意这里并不是 p, q 两个节点的合并，而是两棵树根节点的合并。因为 p, q 一旦连通，那么他们所属的连通分量就合并成了同一个更大的连通分量。

综上，并查集中每个节点其实不在乎自己的子节点是谁，只在乎自己的根节点是谁，所以一个并查集节点类似于下面这样：

class UFNode{
    int id;
    UFNode parent;
}




这样，对于任意一个节点，我们都可以顺着 parent 指针一路找到它的根节点。union, connected, count 方法的实现思路如下：
// 连接节点 p 和节点 q
void union(UFNode p, UFNode q) {
    // 找到节点 p 和节点 q 的根节点
    // 将 p 所在的整棵树接到 q 所在的整棵树下面
    find(p).parent = find(q);
}

// 查询节点 p 和节点 q 是否连通（是否在同一个连通分量内）
boolean connected(UFNode p, UFNode q) {
    return find(p).id == find(q).id;
}

// 查询节点 node 的根节点，时间复杂度取决于树的高度
UFNode find(UFNode node) {
    while (node.parent != null) {
        node = node.parent;
    }
    return node;
}
union 和 connected 方法的时间复杂度都依赖 find 方法，而 find 方法的时间复杂度取决于树的高度。

所以并查集算法最终的目标，就是要尽可能降低树的高度，如果能保持树高为常数，那么上述方法的复杂度就都是 
O
(
1
)
O(1) 了。


权重数组的优化效果
在仔细观察即可发现，使得树高线性增长的原因是，每次 union 操作都是将节点个数较多的树接到了节点个数较少的树下面，这就很容易让树高增加，很不明智。

所以为了解决这个问题，一种优化思路是引入一个权重数组，记录以每个节点的为根的树的节点个数，然后在 union 方法中，总是将节点个数较少的树接到节点个数较多的树下面，这样可以保证树尽可能平衡，树高也就不会线性增长。

下面使用 UF.createWeighted 创建一个使用权重数组优化的 UF 算法实现：

可以看到，同样的测试代码，这种优化的 UF 算法实现，就不会出现树高过度增长的情况。

这个算法可以保证最终树高在 
O
(
log
⁡
N
)
O(logN) 级别，所以 union, connected, find 方法的时间复杂度都是 
O
(
log
⁡
N
)
O(logN)。


路径压缩的优化效果
下面展示一下路径压缩优化方法，它可以让树高始终保持在常数级别，这样 union, connected, find 方法的时间复杂度都是 
O
(
1
)
O(1)。

使用 UF.createPathCompression 创建一个使用路径压缩优化的 UF 算法实现，请你逐行点击每行代码，观察右侧的树结构：

在 union 算法执行时，你会看到树的高度并不平衡，那是因为我的测试数据比较特殊，union 操作并没有受到树高的影响，所以没有触发完整的路径压缩。

最后执行 connected 方法时，由于节点 0, 1 在树的底部，所以对整条树枝触发了路径压缩，直接将树的高度压缩到了 2。

这就是路径压缩的效果，一旦触发，无论树枝的高度是多少，都会被直接压缩为 2，路径压缩的 
均摊复杂度 是 
O
(
1
)
O(1)，这样就可以保证 union, connected, find 方法的时间复杂度都是常数级别 
O
(
1
)
O(1)。

以上就是并查集的核心原理及直观展示，具体的代码实现安排在后面的 
Union Find 算法实现及应用 章节中，建议按照目录顺序循序渐进地学习。
